#include "Detector.h"
#include <sstream>

using namespace std::tr1;

extern map<UINT32, ThreadVecTime> AllThread;
extern int ThreadNum;
extern size_t MaxSum;
extern int Race_Warnings;
extern int ConBOF_Warnings;
extern int DoubleFree_Warnings;
extern int UAF_Warnings;
extern long ConNumFrames;
extern long NumAnalysis;
extern map<ADDRINT, MallocInf> MallocSize;

extern map<ADDRINT, ResultInf> Result_ConBOF;
extern map<ADDRINT, ResultInf> Result_ConDF;
extern map<ADDRINT, ResultInf> Result_ConUAF;

extern ofstream ConBOFOut;
extern ofstream FreeOut;
extern ofstream DoubleFreeOut;

extern ofstream RaceOut;

extern set<string> Simple_ConBOF;
extern set<string> Simple_ConDF;
extern set<string> Simple_ConUAF;

bool CheckLock(const set<ADDRINT> &lockone, const set<ADDRINT> &locktwo) //check critical sections
{
    set<ADDRINT>::const_iterator setformain, setforanother;
    if(lockone.empty() || locktwo.empty())
        return true;
    for(setformain=lockone.begin(); setformain!=lockone.end(); setformain++)
    {
        setforanother=locktwo.find(*setformain);
        if(setforanother!=locktwo.end())
            return false;
    }
    return true;
}

bool IsInMallocSize(ADDRINT address, string &codeinf)
{
    map<ADDRINT, MallocInf>::iterator loopmalloc;
    for(loopmalloc=MallocSize.begin();loopmalloc!=MallocSize.end();loopmalloc++)
    {
        if(address>=loopmalloc->first && address<(loopmalloc->first+(loopmalloc->second).size))
        {
            codeinf=(loopmalloc->second).codeinf;
            return true;
        }
    }
    return false;
}

void InsertResult_Con(ADDRINT address, map<ADDRINT, ResultInf> &Result, string codeinf)
{
    map<ADDRINT, ResultInf>::iterator findaddress;
    findaddress=Result.find(address);
    if(findaddress==Result.end())
    {
        Result[address]=(struct ResultInf){1,codeinf};
    }
    else
    {
        (findaddress->second).number=(findaddress->second).number+1;
    }
}

void InsertResult_simple(set<string> &Result, const string &codeinf)
{
    Result.insert(codeinf);
}

bool CompareVC(THREADID threadid, map<UINT32, long> &OldVC, map<UINT32, long> &NewVC)
{
    map<UINT32, long>::iterator OldItVC;
    map<UINT32, long>::iterator NewItVC;
    
    OldItVC=OldVC.find(threadid);
    NewItVC=NewVC.find(threadid);
    if((OldItVC!=OldVC.end())&&(NewItVC!=NewVC.end())&&(OldItVC->second<NewItVC->second))
    {
        return true;
    }
    else
    {
        return false;
    }
}

static void GetSource(const set<ADDRINT> &InsAddress, string &Source)
{
    set<ADDRINT>::const_iterator loopins;
    PIN_LockClient();
    for(loopins=InsAddress.begin(); loopins!=InsAddress.end(); loopins++)
    {
        string filename;
        INT32 line;
        PIN_GetSourceLocation(*loopins, NULL, &line, &filename);
        if(line>1)
        {
            ostringstream tmposs;
            tmposs<<filename<<" : "<<line<<endl;
            Source=Source+tmposs.str();
        }
    }
    PIN_UnlockClient();
}

void DetectRace(const unordered_map<ADDRINT, SharedMemoryAccessInf> &MemoryOne, const unordered_map<ADDRINT, SharedMemoryAccessInf> &MemoryTwo, UINT32 threadIDOne, UINT32 threadIDTwo)
{
    unordered_map<ADDRINT, SharedMemoryAccessInf>::const_iterator MapforOne;
    unordered_map<ADDRINT, SharedMemoryAccessInf>::const_iterator MapforTwo;
    for(MapforOne=MemoryOne.begin();MapforOne!=MemoryOne.end();MapforOne++)
    {
        MapforTwo=MemoryTwo.find(MapforOne->first);
        if(MapforTwo!=MemoryTwo.end())
        {
            string sourcecodeOneR, sourcecodeOneW;
            string sourcecodeTwoR, sourcecodeTwoW;
            if((MapforOne->second).Rstatus && (MapforTwo->second).Wstatus)
            {
                GetSource((MapforOne->second).InsR, sourcecodeOneR);
                GetSource((MapforTwo->second).InsW, sourcecodeTwoW);
                if((sourcecodeOneR.length()>1) && (sourcecodeTwoW.length()>1))
                {
                    ConBOFOut<<"+++++R-W Race++"<<endl<<"Thread: "<<threadIDOne<<" Thread: "<<threadIDTwo<<" Address: "<<hex<<MapforOne->first<<dec<<endl;
                    //输出源码
                    ConBOFOut<<"+++Read Source Code: "<<endl<<sourcecodeOneR;
                    ConBOFOut<<"+++Write Source Code: "<<endl<<sourcecodeTwoW;
                    ConBOFOut<<"----------------------"<<endl<<endl;
                }
            }
            if((MapforOne->second).Wstatus && (MapforTwo->second).Rstatus)
            {
                GetSource((MapforOne->second).InsW, sourcecodeOneW);
                GetSource((MapforTwo->second).InsR, sourcecodeTwoR);
                if((sourcecodeOneW.length()>1) && (sourcecodeTwoR.length()>1))
                {
                    ConBOFOut<<"+++++W-R Race++"<<endl<<"Thread: "<<threadIDOne<<" Thread: "<<threadIDTwo<<" Address: "<<hex<<MapforOne->first<<dec<<endl;
                    //输出源码
                    ConBOFOut<<"+++Write Source Code: "<<endl<<sourcecodeOneW;
                    ConBOFOut<<"+++Read Source Code: "<<endl<<sourcecodeTwoR;
                    ConBOFOut<<"----------------------"<<endl<<endl;
                }
            }
            if((MapforOne->second).Wstatus && (MapforTwo->second).Wstatus)
            {
                GetSource((MapforOne->second).InsW, sourcecodeOneW);
                GetSource((MapforTwo->second).InsW, sourcecodeTwoW);
                if((sourcecodeOneW.length()>1) && (sourcecodeTwoW.length()>1))
                {
                    ConBOFOut<<"+++++W-W Race++"<<endl<<"Thread: "<<threadIDOne<<" Thread: "<<threadIDTwo<<" Address: "<<hex<<MapforOne->first<<dec<<endl;
                    //输出源码
                    ConBOFOut<<"+++Write Source Code: "<<endl<<sourcecodeOneW;
                    ConBOFOut<<"+++Write Source Code: "<<endl<<sourcecodeTwoW;
                    ConBOFOut<<"----------------------"<<endl<<endl;
                }
            }
        }
    }
}

void DetectBOF(const map<ADDRINT, string> &MemoryOne, const unordered_map<ADDRINT, SharedMemoryAccessInf> &MemoryTwo, UINT32 threadIDOne, UINT32 threadIDTwo) //second one have rtn queue
{
    map<ADDRINT, string>::const_iterator MapforOne;
    unordered_map<ADDRINT, SharedMemoryAccessInf>::const_iterator MapforTwo;
    for(MapforOne=MemoryOne.begin();MapforOne!=MemoryOne.end();MapforOne++)
    {
        MapforTwo=MemoryTwo.find(MapforOne->first);
        if(MapforTwo!=MemoryTwo.end())
        {
            string sourcecode;
            GetSource((MapforTwo->second).InsW, sourcecode);
            if(sourcecode.length()>1)
            {
                ConBOFOut<<"+++++"<<MapforOne->second<<"++"<<endl<<"Thread: "<<threadIDOne<<" Thread: "<<threadIDTwo<<" Address: "<<hex<<MapforOne->first<<dec<<" Modified location: "<<MapforOne->second<<endl;
                //输出源码
                ConBOFOut<<"+++Write Source Code:"<<endl<<sourcecode<<"----------------------"<<endl<<endl;
            }
        }
    }
}

void DetectUseAfterFree(const map<ADDRINT, MallocInf> &FreeMemoryOne, const unordered_map<ADDRINT, SharedMemoryAccessInf> &MemoryTwo, UINT32 threadIDOne, UINT32 threadIDTwo)
{
    map<ADDRINT, MallocInf>::const_iterator MapforOne;
    unordered_map<ADDRINT, SharedMemoryAccessInf>::const_iterator MapforTwo;
    map<ADDRINT, string>::const_iterator MapforDoubleFree;
    for(MapforTwo=MemoryTwo.begin();MapforTwo!=MemoryTwo.end();MapforTwo++)
    {
        for(MapforOne=FreeMemoryOne.begin();MapforOne!=FreeMemoryOne.end();MapforOne++)
        {
            if((MapforTwo->first>=MapforOne->first)&&(MapforTwo->first<(MapforOne->first+(MapforOne->second).size)))
            {
                string sourcecodeR, sourcecodeW;
                GetSource((MapforTwo->second).InsR, sourcecodeR);
                GetSource((MapforTwo->second).InsW, sourcecodeW);
                if((sourcecodeR.length()>1) || (sourcecodeW.length()>1))
                {
                    FreeOut<<"+++++Use_After_Free+++++"<<(MapforOne->second).codeinf<<"++"<<endl<<"Thread: "<<threadIDOne<<" Thread: "<<threadIDTwo<<" Address: "<<hex<<MapforTwo->first<<dec<<endl;
                    //输出源码
                    if(sourcecodeR.length()>1)
                        FreeOut<<"+++Read Source Code:"<<endl<<sourcecodeR;
                    if(sourcecodeW.length()>1)
                        FreeOut<<"+++Write Source Code:"<<endl<<sourcecodeW;
                    FreeOut<<"----------------------"<<endl<<endl;
                }
            }
        }
    }
}

void DetectDoubleFree(const map<ADDRINT, string> &MemoryOne, const map<ADDRINT, string> &MemoryTwo, UINT32 threadIDOne, UINT32 threadIDTwo)
{
    map<ADDRINT, string>::const_iterator MapforOne;
    map<ADDRINT, string>::const_iterator MapforTwo;
    for(MapforOne=MemoryOne.begin();MapforOne!=MemoryOne.end();MapforOne++)
    {
        MapforTwo=MemoryTwo.find(MapforOne->first);
        if(MapforTwo!=MemoryTwo.end())
        {
            DoubleFreeOut<<"+++++Double_Free+++++"<<MapforOne->second<<"++"<<endl<<"Thread: "<<threadIDOne<<" First file: "<<MapforOne->second<<" Thread: "<<threadIDTwo<<" Second file: "<<MapforTwo->second<<" Address: "<<hex<<MapforOne->first<<dec<<endl;
        }
    }
}

/* each detection analysis for one thread */
void VectorDetect(THREADID threadID, ThreadVecTime &TargetThread)
{
    map<UINT32, ThreadVecTime>::iterator LoopItDetect;
    list<struct RWVecTime>::iterator MainItListDetect;
    list<struct RWVecTime>::iterator AnotherItListBeDetected;
    
    if((TargetThread.VecTimeList).empty())
    {
        return;
    }

    MainItListDetect=TargetThread.ListAddress;

    for(LoopItDetect=AllThread.begin();LoopItDetect!=AllThread.end();LoopItDetect++)
    {
        if((LoopItDetect->first!=threadID)&&((LoopItDetect->second).VecTimeList).size()>1)
        {
            AnotherItListBeDetected=(LoopItDetect->second).ListAddress;
            AnotherItListBeDetected--;
            for(;AnotherItListBeDetected!=((LoopItDetect->second).VecTimeList).end();AnotherItListBeDetected--)
            {
                if(CompareVC(LoopItDetect->first,AnotherItListBeDetected->VecTime,MainItListDetect->VecTime))
                {
                    break;
                }
                if((MainItListDetect->Writeflag && AnotherItListBeDetected->Accessflag) || (MainItListDetect->Accessflag && AnotherItListBeDetected->Writeflag))
                {
                    DetectRace(MainItListDetect->SharedLocation, AnotherItListBeDetected->SharedLocation, threadID, LoopItDetect->first);
                }
                if(MainItListDetect->Writeflag && AnotherItListBeDetected->CMRflag)
                {
                    DetectBOF(AnotherItListBeDetected->CMRMemory, MainItListDetect->SharedLocation, LoopItDetect->first, threadID);
                }
                if(AnotherItListBeDetected->Writeflag && MainItListDetect->CMRflag)
                {
                    DetectBOF(MainItListDetect->CMRMemory, AnotherItListBeDetected->SharedLocation, threadID, LoopItDetect->first);
                }
                if(MainItListDetect->Freeflag && AnotherItListBeDetected->Accessflag)
                {
                    DetectUseAfterFree(MainItListDetect->FreeMemory, AnotherItListBeDetected->SharedLocation, threadID, LoopItDetect->first);
                }
                if(MainItListDetect->Accessflag && AnotherItListBeDetected->Freeflag)
                {
                    DetectUseAfterFree(AnotherItListBeDetected->FreeMemory, MainItListDetect->SharedLocation, LoopItDetect->first,threadID);
                }
                if(MainItListDetect->Freeflag && AnotherItListBeDetected->Freeflag)
                {
                    DetectDoubleFree(MainItListDetect->DoubleFree, AnotherItListBeDetected->DoubleFree, threadID, LoopItDetect->first);
                }
            }
        }
    }
}
